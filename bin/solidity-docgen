#! /usr/bin/env node

/**
 * @license
 * MIT Licensed.
 * Copyright (c) 2018 OpenZeppelin.
 * See LICENSE file in project's root directory.
 */

const path = require('path')
const fs = require('fs')
const assert = require('assert')
const program = require('commander')
const solidityDocgen = require('..').default
const version = require('../package.json').version

program
  .version(version, '-v, --version')
  .arguments('<project_path> <contracts_path> <docusaurus_path> [repository_root]')
  .option(
    '-x, --exclude <paths>',
    'Comma-separated list of paths to exclude (relative to contracts directory)'
  )
  .action((projectPathInput, contractsPathInput, docusaurusPathInput, repositoryRootInput, options) => {
    const projectPath = path.resolve(projectPathInput)
    const contractsPath = path.resolve(contractsPathInput)
    const docusaurusPath = path.resolve(docusaurusPathInput)
    const repositoryRoot = path.resolve(repositoryRootInput || projectPathInput)
    assert(projectPath.indexOf(repositoryRoot) === 0, 'Project path is not a subdirectory of repository root.')
    assert(fs.existsSync(projectPath), 'Project directory does not exist.')
    assert(fs.existsSync(contractsPath), 'Contracts directory does not exist.')
    assert(fs.existsSync(docusaurusPath), 'Docusaurus directory does not exist.')
    assert(fs.existsSync(repositoryRoot), 'Repository root directory does not exist.')
    const excludePaths = parseExcludeOption(contractsPath, options)
    solidityDocgen(projectPath, contractsPath, docusaurusPath, repositoryRoot, excludePaths)
  })

function parseExcludeOption (contractsPath, options) {
  if (!options.exclude) {
    return []
  }
  return options.exclude.split(',').map(input => {
    return path.resolve(contractsPath, input)
  })
}

program.parse(process.argv)
